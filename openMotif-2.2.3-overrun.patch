--- openMotif-2.2.3/lib/Xm/List.c.overrun	2006-05-15 16:40:26.000000000 +0200
+++ openMotif-2.2.3/lib/Xm/List.c	2006-05-16 16:58:17.000000000 +0200
@@ -177,7 +177,8 @@
 		       Dimension old_max_height);
 static void ResetExtents(XmListWidget lw,
 			 Boolean recache_extents);
-static void FixStartEnd(int pos, int count, int *start, int *end);
+static void FixStartEnd(XmListWidget lw,
+			int pos, int count, int *start, int *end);
 static int AddInternalElements(XmListWidget lw,
 			       XmString *items,
 			       int nitems,
@@ -3085,7 +3086,8 @@
  ************************************************************************/
 
 static void
-FixStartEnd(int pos,
+FixStartEnd(XmListWidget lw,
+	    int pos,
 	    int count,
 	    int *start,
 	    int *end)
@@ -3098,6 +3100,11 @@
       *end = save;
     }
 
+  if (*start < 0)
+    *start = 0;
+  if (*end >= lw->list.itemCount)
+    *end = lw->list.itemCount - 1;
+
   /* No overlap, before the deleted range. */
   if (*end < pos)
     return;
@@ -3253,8 +3260,8 @@
 
   /* BEGIN OSF Fix CR 4656 */
   /* Fix selection delimiters. */
-  FixStartEnd(curpos, count, &lw->list.StartItem, &lw->list.EndItem);
-  FixStartEnd(curpos, count, &lw->list.OldStartItem, &lw->list.OldEndItem);
+  FixStartEnd(lw, curpos, count, &lw->list.StartItem, &lw->list.EndItem);
+  FixStartEnd(lw, curpos, count, &lw->list.OldStartItem, &lw->list.OldEndItem);
   /* END OSF Fix CR 4656 */
 
   if (lw->list.itemCount)
@@ -3326,10 +3333,11 @@
 
 	      /* BEGIN OSF Fix CR 4656 */
 	      /* Fix selection delimiters. */
-	      FixStartEnd(item_pos, 1, &lw->list.StartItem, &lw->list.EndItem);
+	      FixStartEnd(lw,
+			  item_pos, 1, &lw->list.StartItem, &lw->list.EndItem);
 
 	      /* Fix old selection delimiters. */
-	      FixStartEnd(item_pos, 1,
+	      FixStartEnd(lw, item_pos, 1,
 			  &lw->list.OldStartItem,
 			  &lw->list.OldEndItem);
 	      /* END OSF Fix CR 4656 */
@@ -3343,9 +3351,9 @@
    */
   if (oldItemCount > lw->list.itemCount)
     {
-      FixStartEnd(lw->list.itemCount, oldItemCount - lw->list.itemCount,
+      FixStartEnd(lw, lw->list.itemCount, oldItemCount - lw->list.itemCount,
 		  &lw->list.StartItem, &lw->list.EndItem);
-      FixStartEnd(lw->list.itemCount, oldItemCount - lw->list.itemCount,
+      FixStartEnd(lw, lw->list.itemCount, oldItemCount - lw->list.itemCount,
 		  &lw->list.OldStartItem, &lw->list.OldEndItem);
     }
 
@@ -4111,6 +4119,11 @@
       end = first;
     }
 
+  if (start < 0)
+    start = 0;
+  if (end >= lw->list.itemCount)
+    end = lw->list.itemCount - 1;
+
   for (; start <= end; start++)
     {
       lw->list.InternalList[start]->selected = select;
@@ -4140,6 +4153,11 @@
       end = tmp;
     }
 
+  if (start < 0)
+    start = 0;
+  if (end >= lw->list.itemCount)
+    end = lw->list.itemCount - 1;
+
   tmp = lw->list.StartItem;
   for (; start <= end; start++)
     if ((start != tmp) || dostart)
@@ -4236,6 +4254,9 @@
   if (lw->list.LastHLItem == item)
     return;
 
+  if (item < 0 || item >= lw->list.itemCount)
+    return;
+
   switch(lw->list.SelectionPolicy)
     {
     case XmBROWSE_SELECT:
@@ -4269,7 +4290,10 @@
     case XmEXTENDED_SELECT:
       /* BEGIN OSF Fix CR 5954 */
       dir = (lw->list.LastHLItem < item) ? 1 : -1;
-      while (lw->list.LastHLItem != item)
+      while (lw->list.LastHLItem != item && 
+	     lw->list.StartItem >= 0 && lw->list.EndItem >= 0 && 
+	     lw->list.StartItem < lw->list.itemCount && 
+	     lw->list.EndItem < lw->list.itemCount)
 	{
 	  lw->list.LastHLItem += dir;
 
@@ -4308,6 +4332,9 @@
 
   if (lw->list.LastHLItem == item) return;
 
+  if (item < 0 || item >= lw->list.itemCount)
+    return;
+
   /* First the non-addmode case */
   if (lw->list.SelectionMode == XmNORMAL_MODE)
     {
@@ -5023,9 +5050,10 @@
    *
    ****************/
   i = MIN(lw->list.OldStartItem, lw->list.OldEndItem);
+  i = MAX(i, 0);
   j = MAX(lw->list.OldStartItem, lw->list.OldEndItem);
   if ((i != 0) || (j != 0))
-    for (; i <= j; i++)
+    for (; i <= j && i < lw->list.itemCount; i++)
       lw->list.InternalList[i]->last_selected =
 	lw->list.InternalList[i]->selected;
 
@@ -5171,9 +5199,10 @@
    *
    ****************/
   i = MIN(lw->list.OldStartItem, lw->list.OldEndItem);
+  i = MAX(i, 0);
   j = MAX(lw->list.OldStartItem, lw->list.OldEndItem);
   if ((i != 0) || (j != 0))
-    for (; i <= j; i++)
+    for (; i <= j && i < lw->list.itemCount; i++)
       lw->list.InternalList[i]->last_selected =
 	lw->list.InternalList[i]->selected;
 
@@ -5609,6 +5638,9 @@
   item = lw->list.LastHLItem;
   lw->list.DidSelection = TRUE;
 
+  if (item < 0 || item >= lw->list.itemCount)
+    return;
+
   /* If there's a drag timeout, remove it so we don't see two selections. */
   if (lw->list.DragID)
     {
@@ -6953,8 +6985,8 @@
     {
       item = WhichItem(lw, event->xbutton.y);
       if (item > 0)
-	item -=lw->list.top_position;
-      if ((item < 0) || (item > lw->list.itemCount))
+	item -= lw->list.top_position;
+      if ((item < 0) || (item >= lw->list.itemCount))
 	return;
     }
   else
@@ -8142,7 +8174,7 @@
 
 /************************************************************************
  *									*
- * XmDeletePos - delete the item at the specified position from the	*
+ * XmListDeletePos - delete the item at the specified position from the	*
  *	list.								*
  *									*
  ************************************************************************/
@@ -8165,7 +8197,7 @@
 
 /************************************************************************
  *									*
- * XmDeleteItemsPos - delete the items at the specified position        *
+ * XmListDeleteItemsPos - delete the items at the specified position    *
  * from the list.							*
  *									*
  ************************************************************************/
@@ -8922,7 +8954,7 @@
 
 /************************************************************************
  *									*
- * XmDeselectAllItems - hose the entire selected list			*
+ * XmListDeselectAllItems - hose the entire selected list		*
  *									*
  ************************************************************************/
 
